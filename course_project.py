# Подключение всех необходимых библиотек
# Нам нужно: speech_recognition, os, sys, webbrowser, time, locale и собственный доп модуль numbers
# Для первой бибилотеки прописываем также псевдоним
import speech_recognition as sr # 
import os
import sys
import webbrowser 
import time
import locale
import numbers

# Определяем локацию, для использования названия месяцев на русском
locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8') 
# Определяем сегодняшнее число и месяц
day = numbers.number_to_word(str(time.strftime('%d')))
month = time.strftime('%B')

###    НАЧАЛО ФУНКЦИИ: учим помощницу говорить     ###
def talk(words):
    print(words)  # output произносимых слов в консоль, для удобства использования
    os.system('say -v Milena ' + words)  # google cloud предоставляет всего один голос на русском языке - Милену
###    КОНЕЦ ФУНКЦИИ    ###

talk('Привет, я Милена. Ваш голосовой помощник. Я еще не всему научилась и медленно думаю. Пожалуйста, проявите терпение.')
talk('Чем я могу помочь?')

###    НАЧАЛО ФУНКЦИИ    ###
""" 
	Функция command() служит для отслеживания микрофона.
	Вызывая функцию мы будет слушать что скажет пользователь,
	при этом для прослушивания будет использован микрофон.
	Получение данные будут сконвертированы в строку и далее
	будет происходить их проверка.
"""
def command():
    # Создаем объект на основе библиотеки
	# speech_recognition и вызываем метод для определения данных
    r = sr.Recognizer()

    with sr.Microphone() as source:   # открываем запись в файл
        # Просто вывод, чтобы мы знали когда говорить
        print('Говорите')
        # Устанавливаем паузу, чтобы прослушивание
		# началось лишь по прошествию 1 секунды
        r.pause_threshold = 1
        # используем adjust_for_ambient_noise для удаления
		# посторонних шумов из аудио дорожки
        r.adjust_for_ambient_noise(source, duration=1) 
        # Полученные данные записываем в переменную audio
		# пока мы получили лишь mp3 звук
        audio = r.listen(source) 
    try: # Обрабатываем все при помощи исключений
        """ 
		Распознаем данные из mp3 дорожки.
		Указываем что отслеживаемый язык русский.
		Благодаря lower() приводим все в нижний регистр.
		Теперь мы получили данные в формате строки,
		которые спокойно можем проверить в условиях
		"""
        task = r.recognize_google(audio, language='ru-RU').lower()
        # Просто отображаем текст что сказал пользователь
        print('Вы сказали: ' + task)
    except sr.UnknownValueError:  # Случай когда команда не распознана
		# Вызываем снова функцию command() для
		# получения текста от пользователя
        talk('Извините не понимаю. Повторите команду.')
        task = command()
    # В конце функции возвращаем текст задания
	# или же повторный вызов функции
    return task 
###    КОНЕЦ ФУНКЦИИ    ###

###    НАЧАЛО ФУНКЦИИ    ###
# Данная функция служит для проверки текста, что сказал пользователь
# Здесь и происходит выполнение команд пользователя
def makeSomeNoise(task):
    # Открывает сайт рэу
    if 'открой сайт рэу' in task:  # простая проверка на соответствие
        talk('открываю веб-сайт российского экономического университета')
        url = 'https://www.rea.ru/'
        webbrowser.open(url)  # откроет сайт по заданному url 
    # О погоде
    elif 'какая сегодня погода' in task:
        talk('да какая разница? все равно ты кроме метро и универа ничего не видишь')
        url = 'https://www.gismeteo.ru/'
        webbrowser.open(url)
    # О преподавателе
    elif 'кто такой черноусов' in task:
        talk('Черноусов Андрей Анатольевич - кандидат экономических наук, преподаватель РЭУ')
        talk('Перенаправляю на сайт с подробной информацией')
        url = 'https://www.rea.ru/ru/org/employees/Pages/Chernousov-Andrejj-Anatolevich.aspx'
        webbrowser.open(url) 
    # Дата
    elif 'какое сегодня число' in task:
        talk('Сегодня  ' + str(day) + '  ' + str(month)) # возьмет ранее определенные данные 
    # Расписание пар
    elif 'какое сегодня расписание' in task:
        talk('как будто тебе не всё равно')
        url = 'https://rasp.rea.ru/?q=291%D0%B4-07%D0%B8%D0%B1%2F17'
        webbrowser.open(url) 
    # Завершение работы
    elif 'нет спасибо' in task: 
        talk('Рада помочь.  Завершаю работу.  До свидания')
        sys.exit() # Выходим из программы
    time.sleep(7) # после каждого выполненя команды (за исключением завершения) Милена ждет 7 секунд
    talk('Что-то еще?')
    return task
###    КОНЕЦ ФУНКЦИИ    ###

# Вызов функции для проверки текста будет осуществляться постоянно, поэтому здесь
# прописан бесконечный цикл while. Выход из программы предусмотрен командой внутри самой функции
while True:
    makeSomeNoise(command())








